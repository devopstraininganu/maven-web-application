//function to send slack notifications

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  }
 else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } 
else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}
node {
    
    echo "job name is : ${env.JOB_NAME}"
    echo "Node name is : ${env.NODE_NAME}"
    echo "jenkins url is : ${env.JENKINS_URL}"
    echo "build url is : ${env.BUILD_URL}"

//(GIVE ANY ONE TRIGGER AT A TIME )
//for poll scm ----> properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])
//for build periodically---> properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([cron('* * * * *')])])
//for github scm 
 
 properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([githubPush()])])

def mavenHome = tool name: 'Maven-3.8.5'

try {

 notifyBuild('STARTED')

//get code from github
stage('GetCodeFromGIT'){
git branch: 'development', credentialsId: '101cb3ba-6f79-42c1-bede-3d82e1aa0651', url: 'https://github.com/devopstraininganu/maven-web-application.git'
}

//build using maven
stage('MavenBuild'){
sh "${mavenHome}/bin/mvn clean package"
}

//get sonarqube report
stage('getsonarqubereport'){
sh "${mavenHome}/bin/mvn sonar:sonar"
}

//add to nexus repo's
stage('addtonexus'){
sh "${mavenHome}/bin/mvn deploy"
}

//Deploy to TOMCAT server
stage('deploytotomcat'){
sshagent(['0d3a5b75-656d-4a9d-ae49-76c4914637bf']) {
  sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@13.126.213.199:/opt/apache-tomcat-9.0.62/webapps"
}
}
   }//try closing
	catch(e)
	{
	currentBuild.result = "FAILED"
	}
	finally{
	notifyBuild(currentBuild.result)
	}
   }//node closing
